// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// bbt
List bbt(CharacterVector teams, IntegerVector rank, NumericMatrix mi_ij, NumericMatrix sig_ij, double kappa, double gamma);
RcppExport SEXP _sport_bbt(SEXP teamsSEXP, SEXP rankSEXP, SEXP mi_ijSEXP, SEXP sig_ijSEXP, SEXP kappaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type teams(teamsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mi_ij(mi_ijSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sig_ij(sig_ijSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(bbt(teams, rank, mi_ij, sig_ij, kappa, gamma));
    return rcpp_result_gen;
END_RCPP
}
// ddl2
List ddl2(CharacterVector teams, IntegerVector rank, NumericMatrix X, NumericMatrix H, NumericMatrix S, NumericMatrix Bu, NumericVector pa);
RcppExport SEXP _sport_ddl2(SEXP teamsSEXP, SEXP rankSEXP, SEXP XSEXP, SEXP HSEXP, SEXP SSEXP, SEXP BuSEXP, SEXP paSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type teams(teamsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Bu(BuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pa(paSEXP);
    rcpp_result_gen = Rcpp::wrap(ddl2(teams, rank, X, H, S, Bu, pa));
    return rcpp_result_gen;
END_RCPP
}
// fide
List fide(CharacterVector teams, std::vector<int> rank, NumericVector r, int K, double init_r, double init_rd);
RcppExport SEXP _sport_fide(SEXP teamsSEXP, SEXP rankSEXP, SEXP rSEXP, SEXP KSEXP, SEXP init_rSEXP, SEXP init_rdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type teams(teamsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type init_r(init_rSEXP);
    Rcpp::traits::input_parameter< double >::type init_rd(init_rdSEXP);
    rcpp_result_gen = Rcpp::wrap(fide(teams, rank, r, K, init_r, init_rd));
    return rcpp_result_gen;
END_RCPP
}
// glicko
List glicko(CharacterVector teams, std::vector<int> rank, NumericVector r, NumericVector rd, NumericVector days, double init_r, double init_rd, double gamma);
RcppExport SEXP _sport_glicko(SEXP teamsSEXP, SEXP rankSEXP, SEXP rSEXP, SEXP rdSEXP, SEXP daysSEXP, SEXP init_rSEXP, SEXP init_rdSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type teams(teamsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rd(rdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type days(daysSEXP);
    Rcpp::traits::input_parameter< double >::type init_r(init_rSEXP);
    Rcpp::traits::input_parameter< double >::type init_rd(init_rdSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(glicko(teams, rank, r, rd, days, init_r, init_rd, gamma));
    return rcpp_result_gen;
END_RCPP
}
// glicko2
List glicko2(CharacterVector teams, std::vector<int> rank, NumericVector r, NumericVector rd, NumericVector sig, NumericVector days, double tau, double init_r, double init_rd);
RcppExport SEXP _sport_glicko2(SEXP teamsSEXP, SEXP rankSEXP, SEXP rSEXP, SEXP rdSEXP, SEXP sigSEXP, SEXP daysSEXP, SEXP tauSEXP, SEXP init_rSEXP, SEXP init_rdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type teams(teamsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rd(rdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type days(daysSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type init_r(init_rSEXP);
    Rcpp::traits::input_parameter< double >::type init_rd(init_rdSEXP);
    rcpp_result_gen = Rcpp::wrap(glicko2(teams, rank, r, rd, sig, days, tau, init_r, init_rd));
    return rcpp_result_gen;
END_RCPP
}
// gonzo
List gonzo(IntegerVector rank, NumericVector mi_i, NumericVector sig_i);
RcppExport SEXP _sport_gonzo(SEXP rankSEXP, SEXP mi_iSEXP, SEXP sig_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mi_i(mi_iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sig_i(sig_iSEXP);
    rcpp_result_gen = Rcpp::wrap(gonzo(rank, mi_i, sig_i));
    return rcpp_result_gen;
END_RCPP
}
// harkness
List harkness(Rcpp::StringVector teams, std::vector<int> rank, std::vector<int> days, std::vector<double> r, std::vector<double> rd, double init_r, double init_rd);
RcppExport SEXP _sport_harkness(SEXP teamsSEXP, SEXP rankSEXP, SEXP daysSEXP, SEXP rSEXP, SEXP rdSEXP, SEXP init_rSEXP, SEXP init_rdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type teams(teamsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type days(daysSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type r(rSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rd(rdSEXP);
    Rcpp::traits::input_parameter< double >::type init_r(init_rSEXP);
    Rcpp::traits::input_parameter< double >::type init_rd(init_rdSEXP);
    rcpp_result_gen = Rcpp::wrap(harkness(teams, rank, days, r, rd, init_r, init_rd));
    return rcpp_result_gen;
END_RCPP
}
// KF
List KF(arma::vec x, arma::mat F, arma::mat B, arma::vec u, arma::vec z, arma::mat H);
RcppExport SEXP _sport_KF(SEXP xSEXP, SEXP FSEXP, SEXP BSEXP, SEXP uSEXP, SEXP zSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(KF(x, F, B, u, z, H));
    return rcpp_result_gen;
END_RCPP
}
// pointsCalc
NumericVector pointsCalc(NumericVector event_id, CharacterVector team_name, NumericVector score);
RcppExport SEXP _sport_pointsCalc(SEXP event_idSEXP, SEXP team_nameSEXP, SEXP scoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type event_id(event_idSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type team_name(team_nameSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type score(scoreSEXP);
    rcpp_result_gen = Rcpp::wrap(pointsCalc(event_id, team_name, score));
    return rcpp_result_gen;
END_RCPP
}
// running_mean
NumericVector running_mean(NumericVector vec);
RcppExport SEXP _sport_running_mean(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(running_mean(vec));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sport_bbt", (DL_FUNC) &_sport_bbt, 6},
    {"_sport_ddl2", (DL_FUNC) &_sport_ddl2, 7},
    {"_sport_fide", (DL_FUNC) &_sport_fide, 6},
    {"_sport_glicko", (DL_FUNC) &_sport_glicko, 8},
    {"_sport_glicko2", (DL_FUNC) &_sport_glicko2, 9},
    {"_sport_gonzo", (DL_FUNC) &_sport_gonzo, 3},
    {"_sport_harkness", (DL_FUNC) &_sport_harkness, 7},
    {"_sport_KF", (DL_FUNC) &_sport_KF, 6},
    {"_sport_pointsCalc", (DL_FUNC) &_sport_pointsCalc, 3},
    {"_sport_running_mean", (DL_FUNC) &_sport_running_mean, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_sport(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
